Instructions:
You are more than welcome to use any programming language of your choice in any environment of your choice. The problems can be done in any language (though you will need to adapt the data structures for your language of choice). You are encouraged to take a functional approach for these problems, however, they can be solved with any approach you're most comfortable with. Good luck!

Please assume all inputs are valid. In addition to the answers, please share your source code.

Note: There is no time restriction other than the last day which you have to submit this until.

~~~

EXERCISE #1
Given the coins 1, 5, 10, 25, 100, 200, what is the minimum number of coins needed to make change for x, and what coins do you use? For instance if you need to make change for 53 cents you need five coins, two quarters (25 cents), and three pennies (1 cent). You have an infinite number of coins to dispense change with (aren't you special).

Input:
653
63
132

>>>>>Bonus: You now have a special 53 cent coin in your arsenal. How do the answers above change?


EXERCISE #2
Congratulations, you are a new employee at a very large firm that specializes in hierarchies! They ask you to write a program that outputs a hierarchy tree based off of tuples (collections of two values) of names and the name of the person they report to. For instance, the tuple ["B" "A"] has the person B reporting to person A. Person A has ["A" nil] which means they report to no one (are at the top of the food chain). [Programming note: nil can be translated to null depending on language you are working with]. This data [["A" nil], ["B" "A"]] would be drawn as

A
└B

You will need to use the following unicode characters to draw the outputs. See below for test inputs and outputs.
│ (U+2502),└ (U+2514)

Note the following assumptions remain true for this problem:
1) The first entry will always be the root entry, i.e. the employee will have no one they report to.
2) There will only be one employee who reports to no one else in the tree.
3) The order will not be randomized.

Input:
[["A" nil]
 ["B" "A"]
 ["C" "B"]
 ["D" "C"]]

Output:
A
└B
 └C
  └D

Input:
[["A" nil]
 ["B" "A"]
 ["C" "B"]
 ["D" "B"]
 ["E" "A"]]

Output:
A
└B
│└C
│└D
└E

Input:
[["A" nil]
 ["B" "A"]
 ["C" "B"]
 ["D" "C"]
 ["E" "A"]]

Output:
A
└B
│└C
│ └D
└E

>>>>>Bonus: Can you add ├ (U+251C) such that:

Input:
[["A" nil]
 ["B" "A"]
 ["C" "B"]
 ["D" "B"]
 ["E" "A"]]

Output:
A
├B
│├C
│└D
└E

Input:
[["A" nil]
 ["B" "A"]
 ["C" "B"]
 ["D" "C"]
 ["E" "A"]]

Output:
A
├B
│└C
│ └D
└E
